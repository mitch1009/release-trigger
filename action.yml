name: "Release Trigger Action"

description: "A reusable action to handle version release and build information"
# all inputs are required 
inputs:
  gpg_private_key:
    description: "GPG secret key for signing commits and tags"
    required: true
  gpg_passphrase:
    description: "Passphrase for the GPG key"
    required: true
  git_user_email:
    description: "Email for git commits"
    required: true
  git_username:
    description: "Username for git commits"
    required: true
  git_token:
    description: "GitHub token for accessing GitHub API"
    required: true
  version_file_path:
    description: "Path to the version file"
    required: true
  release_branch:
    description: "Name of the release branch"
    required: true
  bump_script:
    description: "Path to the bump script"
    required: true
  release_sha:
    description: "Release SHA"
    required: false
outputs:
  release_version:
    description: "The version of the release"
    value: ${{ steps.release-version.outputs.release-version }}
  pr_log:
    description: "Log of pull requests"
    value: ${{ steps.pr-log.outputs.pr-log }}
  build_number:
    description: "The build number"
    value: ${{ steps.build-number.outputs.build_number }}
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4.1.7

    - name: setup node
      uses: actions/setup-node@v4.0.3
      with:
        node-version: "20.x"

    - name: Install GitHub CLI
      shell: bash
      run: |
        type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
        && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
        && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
        && sudo apt update \
        && sudo apt install gh -y

    - name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@v6.1.0
      with:
        gpg_private_key: ${{ inputs.gpg_private_key }}
        passphrase: ${{ inputs.gpg_passphrase }}
        git_user_signingkey: true
        git_commit_gpgsign: true
        git_tag_gpgsign: true

    - name: setup pnpm
      uses: pnpm/action-setup@v4.0.0
      with:
        version: 9.6.0
        run_install: false

    - name: set pnpm cache
      uses: actions/cache@v4.0.2
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-

    - name: pnpm install and build
      shell: bash
      run: pnpm install --no-frozen-lockfile

    - name: Global Git config
      shell: bash
      run: |
        git config --global user.email "${{ inputs.git_user_email }}"
        git config --global user.name "${{ inputs.git_username }}"

    - name: bump version
      shell: bash
      run: pnpm ${{ inputs.bump_script }}

    - name: Push to protected branch
      uses: CasperWA/push-protected@v2.16.0
      with:
        token: ${{ inputs.git_token }}
        branch: ${{ inputs.release_branch }}
        tags: true
        force: true
        acceptable_conclusions: success

    - name: Get PR titles and authors
      shell: bash
      id: pr-log
      env:
        GITHUB_TOKEN: ${{ inputs.git_token }}
      run: |
        PREVIOUS_TAG=$(git describe --tags --always --abbrev=0 HEAD^)
        PR_LOG=$(gh pr list --search "is:merged merged:>$(git log -1 --format=%aI $PREVIOUS_TAG)" --json title,author --jq '.[] | " - [x] " + .title + " by @" + .author.login' | tr '\n\n' ', ')
        echo "PR_LOG<<EOF" >>   $GITHUB_ENV
        echo "$PR_LOG" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo "pr-log=$PR_LOG" >> $GITHUB_OUTPUT

    - name: Release Version
      shell: bash
      id: release-version
      run: |
        echo "release-version=$(jq -r '.version' ${{inputs.version_file_path}} )" >> $GITHUB_OUTPUT
    - name: get build number
      id: build-number
      shell: bash
      run: |
        echo "extracting build number"
        VALUE=$(cat .github/build.yml | xargs)
        echo "build_number=${VALUE}" >> $GITHUB_OUTPUT
        echo "build_number=${VALUE}"
    - name: Log all variables
      shell: bash
      run: |
        echo "release-version=${{ steps.release-version.outputs.release-version }}"
        echo "build-number=${{ steps.build-number.outputs.build_number }}"
        echo "pr-log=${{ steps.pr-log.outputs.pr-log }}"
        echo "pr-logs=${{ steps.pr-log.outputs.pr-log }}"
